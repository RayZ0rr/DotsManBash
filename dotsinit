#!/usr/bin/env bash

myDots=""
myName=""
# myName="$(whoami)"

[ -z "$myDots" ] && printf "\nmyDots variable missing.\nEdit dotsinit script and add 'myDots' variable\n\n" && exit 1
[ -z "$myName" ] && printf "\nmyName variable missing.\nEdit dotsinit script and add 'myName' variable\n\n" && exit 1

configFolders=( "bash" "zsh" "git" "herbstluftwm" "i3" "polybar" "sxhkd" "rofi" "alacritty" "vifm" "picom" "conky" "dunst" "tmux" "jgmenu" "zathura" "bottom" "bat" "starshipPrompt" "neofetch" )

setup_test_files(){
  current_path="$PWD"
  cd "/home/${myName}"
  ! [[ -d "/home/${myName}/tmp/sync_dots_test" ]] && mkdir -p "/home/${myName}/tmp/sync_dots_test"
  for i in "sxhkd" "zathura"
  do
    ! [[ -d "tmp/sync_dots_test/${i}" ]] && mkdir -p "tmp/sync_dots_test/${i}"
    stow -v --no-folding -t "tmp/sync_dots_test/$i" -d "${myDots}/.config" -S "$i"
  done
  cd "$current_path"
}

setup_test_files_dry(){
  current_path="$PWD"
  cd "/home/${myName}"
  ! [[ -d "/home/${myName}/tmp/sync_dots_test" ]] && mkdir -p "/home/${myName}/tmp/sync_dots_test"
  # Symlink and setup .config files from dotfiles repo ($myDots/.config)
  printf "\nSymlink and setup ~/tmp/sync_dots_test files from dotfiles repo ($myDots/.config/{sxhkd,zathura})\n"
  for i in "sxhkd" "zathura"
  do
    ! [[ -d "tmp/sync_dots_test/${i}" ]] && mkdir -p "tmp/sync_dots_test/${i}"
    stow -n -v --no-folding -t "tmp/sync_dots_test/$i" -d "${myDots}/.config" -S "$i"
    if [[ -d "tmp/sync_dots_test/${i}" && -z "$(ls -A tmp/sync_dots_test/${i})" ]]; then
      rm -r "tmp/sync_dots_test/${i}"
    fi
  done
  if [[ -d "tmp/sync_dots_test" && -z "$(ls -A tmp/sync_dots_test)" ]]; then
    rm -r "tmp/sync_dots_test"
  fi
  cd "$current_path"
}

setup_all_files(){
  current_path="$PWD"
  cd "/home/${myName}"
  # Symlink and setup .config files from dotfiles repo ($myDots/.config)
  printf "\nSymlink and setup .config files from dotfiles repo ($myDots/.config)\n"
  ! [[ -d "/home/${myName}/.config" ]] && mkdir -p "/home/${myName}/.config"
  # for i in "bash" "zsh" "git" "herbstluftwm" "i3" "polybar" "sxhkd" "rofi" "alacritty" "vifm" "picom" "conky" "dunst" "tmux" "jgmenu" "zathura" "bottom" "bat" "starshipPrompt" "neofetch"
  for i in "${configFolders[@]}"
  do
    ! [[ -d ".config/${i}" ]] && mkdir -p ".config/${i}"
    stow -v --no-folding -t ".config/$i" -d "${myDots}/.config" -S "$i"
  done
  # Symlink and setup .local files, mainly ".local/bin", from dotfiles repo ($myDots/.local)
  printf "\nSymlink and setup .local files, mainly \".local/bin\", from dotfiles repo ($myDots/.local)\n"
  ! [[ -d "/home/${myName}/.local/bin" ]] && mkdir -p "/home/${myName}/.local/bin"
  stow -v --no-folding -t ".local/bin" -d "${myDots}/.local" -S "bin"
  # Symlink and setup dotfiles files in $HOME directory like .bashrc,.zshenv, from dotfiles repo ($myDots/HOME)
  printf "\nSymlink and setup dotfiles files in $HOME directory like .bashrc,.zshenv, from dotfiles repo ($myDots/HOME)\n"
  ln -sf "${myDots}/HOME/.bashrc" .bashrc
  ln -sf "${myDots}/HOME/.zshenv" .zshenv
  ln -sf "${myDots}/HOME/.profile" .profile
  ln -sf "${myDots}/HOME/.ignore" .ignore
  ln -sf "${myDots}/HOME/.tmux.conf" .tmux.conf
  ln -sf "${myDots}/HOME/.Xresources" .Xresources
  # Setup fonts to ~/.local/share/fonts from ${myDots}/.local/share/fonts and run `fc-cache -fv`
  printf "\nSetup fonts to ~/.local/share/fonts from ${myDots}/.local/share/fonts and run 'fc-cache -fv'\n"
  ! [[ -d ".local/share/fonts" ]] && mkdir -p ".local/share/fonts"
  tar --zstd -xf "${myDots}/.local/share/fonts/fonts.tar.zst" -C "${HOME}/.local/share/fonts"
  fc-cache -fv
  # Copy desktop and lockscreen wallpaper files to ~/.local/src from ${myDots}/.local/src/*png
  printf "\nCopy desktop and lockscreen wallpaper files to ~/.local/src from ${myDots}/.local/src/*png\n"
  cp -r "${myDots}/.local/src/*.png" .local/src/
  cd "$current_path"
}

setup_all_dry(){
  current_path="$PWD"
  cd "/home/${myName}"
  # Symlink and setup .config files from dotfiles repo ($myDots/.config)
  printf "\nSymlink and setup .config files from dotfiles repo ($myDots/.config)\n"
  ! [[ -d "/home/${myName}/.config" ]] && mkdir -p "/home/${myName}/.config"
  # for i in "bash" "zsh" "git" "herbstluftwm" "i3" "polybar" "sxhkd" "rofi" "alacritty" "vifm" "picom" "conky" "dunst" "tmux" "jgmenu" "zathura" "bottom" "bat" "starshipPrompt" "neofetch"
  for i in "${configFolders[@]}"
  do
    ! [[ -d ".config/${i}" ]] && mkdir -p ".config/${i}"
    stow -n -v --no-folding -t ".config/$i" -d "${myDots}/.config" -S "$i"
    if [[ -d ".config/${i}" && -z "$(ls -A .config/${i})" ]]; then
      rm -r ".config/${i}"
    fi
  done
  # Symlink and setup .local files, mainly ".local/bin", from dotfiles repo ($myDots/.local)
  printf "\nSymlink and setup .local files, mainly \".local/bin\", from dotfiles repo ($myDots/.local)\n"
  ! [[ -d "/home/${myName}/.local/bin" ]] && mkdir -p "/home/${myName}/.local/bin"
  stow -n -v --no-folding -t ".local/bin" -d "${myDots}/.local" -S "bin"
  if [[ -d "/home/${myName}/.local/bin" && -z "$(ls -A /home/${myName}/.local/bin)" ]]; then
    rm -r "/home/${myName}/.local/bin"
  fi
  # Symlink and setup dotfiles files in $HOME directory like .bashrc,.zshenv, from dotfiles repo ($myDots/HOME)
  printf "\nSymlink and setup dotfiles files in $HOME directory like .bashrc,.zshenv, from dotfiles repo ($myDots/HOME)\n"
  printf "LINK: .bashrc => gFolder/RaZ0rr/dotfiles/HOME/.bashrc"
  printf "LINK: .zshenv => gFolder/RaZ0rr/dotfiles/HOME/.zshenv"
  printf "LINK: .profile => gFolder/RaZ0rr/dotfiles/HOME/.profile"
  printf "LINK: .ignore => gFolder/RaZ0rr/dotfiles/HOME/.ignore"
  printf "LINK: .tmux.conf => gFolder/RaZ0rr/dotfiles/HOME/.tmux.conf"
  printf "LINK: .Xresources => gFolder/RaZ0rr/dotfiles/HOME/.Xresources"
  # Setup fonts to ~/.local/share/fonts from ${myDots}/.local/share/fonts and run `fc-cache -fv`
  printf "\nSetup fonts to ~/.local/share/fonts from ${myDots}/.local/share/fonts and run 'fc-cache -fv'\n"
  echo "copying \"${myDots}/.local/share/fonts\" to .local/share/fonts"
  echo "Running 'fc-cache -fv'"
  # Copy desktop and lockscreen wallpaper files to ~/.local/src from ${myDots}/.local/src/*png
  printf "\nCopy desktop and lockscreen wallpaper files to ~/.local/src from ${myDots}/.local/src/*png\n"
  echo "copying \"${myDots}/.local/src/*.png\" .local/src/"
  cd "$current_path"
}

setup_config_files(){
  current_path="$PWD"
  cd "/home/${myName}"
  if ! [[ -z "$@" ]]
  then
    for i in "$@"
    do
      printf "\nStowing ${i}\n"
      ! [[ -d ".config/${i}" ]] && mkdir -p ".config/${i}"
      stow -v --no-folding -t ".config/${i}" -d "${myDots}/.config" -S "${i}"
    done
    cd "$current_path"
    exit 0
  fi
  # Symlink and setup .config files from dotfiles repo ($myDots/.config)
  ! [[ -d "/home/${myName}/.config" ]] && mkdir -p "/home/${myName}/.config"
  # for i in "bash" "zsh" "git" "herbstluftwm" "i3" "polybar" "sxhkd" "rofi" "alacritty" "vifm" "picom" "conky" "dunst" "tmux" "jgmenu" "zathura" "bottom" "bat" "starshipPrompt" "neofetch"
  for i in "${configFolders[@]}"
  do
    ! [[ -d ".config/${i}" ]] && mkdir -p ".config/${i}"
    stow -v --no-folding -t ".config/$i" -d "${myDots}/.config" -S "$i"
  done
  cd "$current_path"
}

setup_local_files(){
  current_path="$PWD"
  cd "/home/${myName}"
  # Symlink and setup .local files, mainly ".local/bin", from dotfiles repo ($myDots/.local)
  ! [[ -d "/home/${myName}/.local/bin" ]] && mkdir -p "/home/${myName}/.local/bin"
  stow -v --no-folding -t ".local/bin" -d "${myDots}/.local" -S "bin"
  cd "$current_path"
}

remove_config_files(){
  current_path="$PWD"
  cd "/home/${myName}"
  if [[ -z "$1" ]] ; then
    echo "Needs arguments"
    echo "Provide dry, link, all or <name of folder> as argument"
  fi
  if [[ "$1" == "link" ]]
  then
    for i in "${configFolders[@]}"
    do
      printf "\n\nRemoving broken links in ${i}\n"
      printf ":----------------------------------------------\n"
      ! [[ -d ".config/${i}" ]] && echo "Directory ${i} doesn't exist" && exit 1
      find .config/${i} -xtype l -delete
    done
    cd "$current_path"
    exit 0
  fi
  if [[ "$1" == "all" ]]
  then
    for i in "${configFolders[@]}"
    do
      printf "\n\nRemoving files in ${i}\n"
      printf ":----------------------------------------------\n"
      ! [[ -d ".config/${i}" ]] && echo "Directory ${i} doesn't exist" && exit 1
      find .config/${i} -delete
    done
    cd "$current_path"
    exit 0
  fi
  if [[ "$1" == "dry" ]]
  then
    for i in "${configFolders[@]}"
    do
      printf "\n\nRemoving files in ${i}\n"
      printf ":----------------------------------------------\n"
      ! [[ -d ".config/${i}" ]] && echo "Directory ${i} doesn't exist" && exit 1
      find .config/${i} | awk '{print "Removing "$1}'
    done
    printf "\n This is just a simulation it will not remove anything"
    cd "$current_path"
    exit 0
  fi
  if ! [[ -z "$@" ]] ; then
    for i in "$@"
    do
      printf "\n\nRemoving files in ${i}\n"
      printf ":----------------------------------------------\n"
      ! [[ -d ".config/${i}" ]] && echo "Directory ${i} doesn't exist" && exit 1
      find .config/${i} -type l -delete
      find .config/${i} -delete
    done
    cd "$current_path"
    exit 0
  fi
  cd "$current_path"
  exit 1
}

setup_home_files(){
  current_path="$PWD"
  cd "/home/${myName}"
  # Symlink and setup dotfiles files in $HOME directory like .bashrc,.zshenv, from dotfiles repo ($myDots/HOME)
  ln -sf "${myDots}/HOME/.bashrc" .bashrc
  ln -sf "${myDots}/HOME/.zshenv" .zshenv
  ln -sf "${myDots}/HOME/.profile" .profile
  ln -sf "${myDots}/HOME/.ignore" .ignore
  ln -sf "${myDots}/HOME/.tmux.conf" .tmux.conf
  ln -sf "${myDots}/HOME/.Xresources" .Xresources
  cd "$current_path"
}

setup_fonts(){
  current_path="$PWD"
  cd "/home/${myName}"
  # Setup fonts to ~/.local/share/fonts from ${myDots}/.local/share/fonts/fonts.tar.zst after extraction through 'tar --zstd' and run `fc-cache -fv`
  ! [[ -d ".local/share/fonts" ]] && mkdir -p ".local/share/fonts"
  tar --zstd -xf "${myDots}/.local/share/fonts/fonts.tar.zst" -C "${HOME}/.local/share/fonts"
  fc-cache -fv
  cd "$current_path"
}

if ! [[ -x "$(command -v stow)" ]]
then
  echo "Requires the software stow (GNU/stow)"
  echo "Exiting"
  exit 1
fi

case "${1}" in
  "dry")
    setup_all_dry
    exit 0 ;;
  "all")
    setup_all_files
    exit 0 ;;
  "home")
    setup_home_files
    exit 0 ;;
  "config")
    setup_config_files "${@: 2}"
    exit 0 ;;
  "rm")
    remove_config_files "${@: 2}"
    exit 0 ;;
  "local")
    setup_local_files
    exit 0 ;;
  "fonts")
    setup_fonts
    exit 0 ;;
  "test")
    setup_test_files
    exit 0 ;;
  "testdry")
    setup_test_files_dry
    exit 0 ;;
  *)
    printf "\nRequires the software stow (GNU/stow)\n"
    printf "\nRun 'dotsinit [all|config|local|home|fonts]' to sync [all|.config|.local/bin|\$HOME|.local/share/fonts] files between dotfiles repo and local system\n"
    printf "\nRun 'dotsinit config' also takes optional arguments of specific config folders. \nEg:- dotsinit config i3, dotsinit config zsh git\n"
    printf "\nRun 'dotsinit rm' to remove .config from local system\n"
    printf "It further needs exactly one of arguments [dry|delete|link] to [simulate removal|directly delete|only delete broken symlinks]\n"
    printf "\nRun 'dotsinit dry' for dry-run of 'all' (no changes will be made)\n\n"
    exit 1 ;;
esac
