#!/usr/bin/env bash

myDots=""
myName=""
# myName="$(whoami)"

[ -z "$myDots" ] && printf "\nmyDots variable missing.\nEdit dotsinit script and add 'myDots' variable\n\n" && exit 1
[ -z "$myName" ] && printf "\nmyName variable missing.\nEdit dotsinit script and add 'myName' variable\n\n" && exit 1

configFolders=( "bash" "zsh" "git" "herbstluftwm" "i3" "polybar" "sxhkd" "rofi" "alacritty" "vifm" "picom" "conky" "dunst" "tmux" "jgmenu" "zathura" "bottom" "bat" "starshipPrompt" "neofetch" )
homeFiles=( ".bashrc" ".zshrc" ".zshenv" ".tmux.conf" "Xresources" ".ignore" ".profile" )

myNvim=".config/nvim"
myNvimRepo=""

setup_nvim_files(){
  [ -z "$myNvimRepo" ] && printf "\nmyNvimRepo variable missing.\nEdit dotsinit script and add 'myNvimRepo' variable\n\n" && exit 1
  current_path="$PWD"
  cd "/home/${myName}"
  if [[ -z "$1" ]] ; then
    echo "Needs arguments"
    echo "Provide ln, cp , cpb , bu , rm as argument"
    cd "$current_path"
    exit 1
  fi
  case "${@}" in
    "ln")
      # Symlink and setup .config files from myNeovim repo ($myNvim)
      # ! [[ -d "/home/${myName}/${myNvim}" ]] && mkdir -p "/home/${myName}/${myNvim}"
      ! [[ -d "${myNvim}" ]] && mkdir -p "${myNvim}"
      find ${myNvim} -xtype l -delete
      stow -v --no-folding --ignore=extra -t "${myNvim}" -d "${myNvimRepo}" -S "nvim"
      find ${myNvim} -xtype l -delete
      exit 0 ;;
    "cp")
      # Copy and setup .config files from myNeovim repo ($myNvim)
      ! [[ -d "/home/${myName}/${myNvim}" ]] && mkdir -p "/home/${myName}/${myNvim}"
      cp -r "${myNvimRepo}"/* ${myNvim}/
      cp -r "${myNvimRepo}"/.[^.]* ${myNvim}/
      find ${myNvim} -xtype l -delete
      exit 0 ;;
    "cpb")
      # Copy and setup .config files from myNeovim repo ($myNvim)
      [[ -d "/home/${myName}/${myNvim}" ]] && cp -r "/home/${myName}/${myNvim}" "/home/${myName}/.config/nvim_bak" && rm -r ${myNvim}
      ! [[ -d "/home/${myName}/${myNvim}" ]] && mkdir -p "/home/${myName}/${myNvim}"
      cp -r "${myNvimRepo}"/* ${myNvim}/
      cp -r "${myNvimRepo}"/.[^.]* ${myNvim}/
      find ${myNvim} -xtype l -delete
      exit 0 ;;
    "bu")
      # Backup .config files from ($myNvim)
      [[ -d "/home/${myName}/${myNvim}" ]] && cp -r "/home/${myName}/${myNvim}" "/home/${myName}/.config/nvim_bak"
      exit 0 ;;
    "rm")
      rm -r ${myNvim}
      exit 0 ;;
  esac
  cd "$current_path"
}

setup_test_files(){
  current_path="$PWD"
  cd "/home/${myName}"
  ! [[ -d "/home/${myName}/tmp/sync_dots_test" ]] && mkdir -p "/home/${myName}/tmp/sync_dots_test"
  for i in "sxhkd" "zathura"
  do
    ! [[ -d "tmp/sync_dots_test/${i}" ]] && mkdir -p "tmp/sync_dots_test/${i}"
    stow -v --no-folding -t "tmp/sync_dots_test/$i" -d "${myDots}/.config" -S "$i"
  done
  cd "$current_path"
}

setup_test_files_dry(){
  current_path="$PWD"
  cd "/home/${myName}"
  ! [[ -d "/home/${myName}/tmp/sync_dots_test" ]] && mkdir -p "/home/${myName}/tmp/sync_dots_test"
  # Symlink and setup .config files from dotfiles repo ($myDots/.config)
  printf "\nSymlink and setup ~/tmp/sync_dots_test files from dotfiles repo ($myDots/.config/{sxhkd,zathura})\n"
  for i in "sxhkd" "zathura"
  do
    ! [[ -d "tmp/sync_dots_test/${i}" ]] && mkdir -p "tmp/sync_dots_test/${i}"
    stow -n -v --no-folding -t "tmp/sync_dots_test/$i" -d "${myDots}/.config" -S "$i"
    if [[ -d "tmp/sync_dots_test/${i}" && -z "$(ls -A tmp/sync_dots_test/${i})" ]]; then
      rm -r "tmp/sync_dots_test/${i}"
    fi
  done
  if [[ -d "tmp/sync_dots_test" && -z "$(ls -A tmp/sync_dots_test)" ]]; then
    rm -r "tmp/sync_dots_test"
  fi
  cd "$current_path"
}

setup_all_files(){
  current_path="$PWD"
  cd "/home/${myName}"
  # Symlink and setup .config files from dotfiles repo ($myDots/.config)
  printf "\nSymlink and setup .config files from dotfiles repo ($myDots/.config)\n"
  ! [[ -d "/home/${myName}/.config" ]] && mkdir -p "/home/${myName}/.config"
  # for i in "bash" "zsh" "git" "herbstluftwm" "i3" "polybar" "sxhkd" "rofi" "alacritty" "vifm" "picom" "conky" "dunst" "tmux" "jgmenu" "zathura" "bottom" "bat" "starshipPrompt" "neofetch"
  for i in "${configFolders[@]}"
  do
    ! [[ -d ".config/${i}" ]] && mkdir -p ".config/${i}"
    stow -v --no-folding -t ".config/$i" -d "${myDots}/.config" -S "$i"
  done
  ln -sf ../"${myDots}/.config/stalonetrayrc" .config/stalonetrayrc
  # Symlink and setup .local files, mainly ".local/bin", from dotfiles repo ($myDots/.local)
  printf "\nSymlink and setup .local files, mainly \".local/bin\", from dotfiles repo ($myDots/.local)\n"
  ! [[ -d "/home/${myName}/.local/bin" ]] && mkdir -p "/home/${myName}/.local/bin"
  stow -v --no-folding -t ".local/bin" -d "${myDots}/.local" -S "bin"
  # Symlink and setup dotfiles files in $HOME directory like .bashrc,.zshenv, from dotfiles repo ($myDots/HOME)
  printf "\nSymlink and setup dotfiles files in $HOME directory like .bashrc,.zshenv, from dotfiles repo ($myDots/HOME)\n"
  for i in "${homeFiles[@]}"
  do
    printf "\n\nLinking ${myDots}/HOME/$i to ~/$i\n"
    printf ":----------------------------------------------\n"
    ln -sf "${myDots}/HOME/$i" $i
  done
  # Copy desktop and lockscreen wallpaper files to ~/.local/src from ${myDots}/.local/src/*png
  printf "\nCopy desktop and lockscreen wallpaper files to ~/.local/src from ${myDots}/.local/src/*png\n"
  ! [[ -d "/home/${myName}/.local/src" ]] && mkdir -p "/home/${myName}/.local/src"
  cp -r "${myDots}/.local/src"/*.png .local/src/
  # Copy rofi themes to ~/.local/share/rofi/themes from ${myDots}/.local/share/rofi/themes
  printf "\nCopy rofi themes to ~/.local/share/rofi/themes from ${myDots}/.local/share/rofi/themes"
  ! [[ -d "/home/${myName}/.local/share/rofi" ]] && mkdir -p "/home/${myName}/.local/share/rofi"
  cp -r "${myDots}/.local/share/rofi/themes" .local/share/rofi/
  cd "$current_path"
}

setup_all_dry(){
  current_path="$PWD"
  cd "/home/${myName}"
  # Symlink and setup .config files from dotfiles repo ($myDots/.config)
  printf "\nSymlink and setup .config files from dotfiles repo ($myDots/.config)\n"
  ! [[ -d "/home/${myName}/.config" ]] && mkdir -p "/home/${myName}/.config"
  # for i in "bash" "zsh" "git" "herbstluftwm" "i3" "polybar" "sxhkd" "rofi" "alacritty" "vifm" "picom" "conky" "dunst" "tmux" "jgmenu" "zathura" "bottom" "bat" "starshipPrompt" "neofetch"
  for i in "${configFolders[@]}"
  do
    ! [[ -d ".config/${i}" ]] && mkdir -p ".config/${i}"
    stow -n -v --no-folding -t ".config/$i" -d "${myDots}/.config" -S "$i"
    if [[ -d ".config/${i}" && -z "$(ls -A .config/${i})" ]]; then
      rm -r ".config/${i}"
    fi
  done
  # Symlink and setup .local files, mainly ".local/bin", from dotfiles repo ($myDots/.local)
  printf "\nSymlink and setup .local files, mainly \".local/bin\", from dotfiles repo ($myDots/.local)\n"
  ! [[ -d "/home/${myName}/.local/bin" ]] && mkdir -p "/home/${myName}/.local/bin"
  stow -n -v --no-folding -t ".local/bin" -d "${myDots}/.local" -S "bin"
  if [[ -d "/home/${myName}/.local/bin" && -z "$(ls -A /home/${myName}/.local/bin)" ]]; then
    rm -r "/home/${myName}/.local/bin"
  fi
  # Symlink and setup dotfiles files in $HOME directory like .bashrc,.zshenv, from dotfiles repo ($myDots/HOME)
  printf "\nSymlink and setup dotfiles files in $HOME directory like .bashrc,.zshenv, from dotfiles repo ($myDots/HOME)\n"
  for i in "${homeFiles[@]}"
  do
    printf "\n\nLinking ${myDots}/HOME/$i to ~/$i\n"
    printf ":----------------------------------------------\n"
    printf "LINK: $i => ${myDots}/HOME/$i"
  done
  printf "\nCopy desktop and lockscreen wallpaper files to ~/.local/src from ${myDots}/.local/src/*png\n"
  echo "copying \"${myDots}/.local/src\"/*.png .local/src/"
  printf "\nCopy rofi themes to ~/.local/share/rofi/themes from ${myDots}/.local/share/rofi/themes"
  echo "copying \"${myDots}/.local/share/rofi/themes\" .local/share/rofi/themes"
  cd "$current_path"
}

link_config_files(){
  current_path="$PWD"
  cd "/home/${myName}"
  # Symlink and setup .config files from dotfiles repo ($myDots/.config)
  ! [[ -d "/home/${myName}/.config" ]] && mkdir -p "/home/${myName}/.config"
  if ! [[ -z "$@" ]]
  then
    for i in "$@"
    do
      if [[ "$i" == "stalonetray" ]] ; then
	ln -sf ../"${myDots}/.config/stalonetrayrc" .config/stalonetrayrc
	continue
      fi
      printf "\nStowing ${i} from ${myDots}/.config to ~/.config/${i}\n"
      ! [[ -d ".config/${i}" ]] && mkdir -p ".config/${i}"
      stow -v --no-folding -t ".config/${i}" -d "${myDots}/.config" -S "${i}"
    done
    cd "$current_path"
    exit 0
  fi
  # for i in "bash" "zsh" "git" "herbstluftwm" "i3" "polybar" "sxhkd" "rofi" "alacritty" "vifm" "picom" "conky" "dunst" "tmux" "jgmenu" "zathura" "bottom" "bat" "starshipPrompt" "neofetch"
  for i in "${configFolders[@]}"
  do
    ! [[ -d ".config/${i}" ]] && mkdir -p ".config/${i}"
    printf "\nStowing ${i} from ${myDots}/.config to ~/.config/${i}\n"
    stow -v --no-folding -t ".config/$i" -d "${myDots}/.config" -S "$i"
  done
  ln -sf ../"${myDots}/.config/stalonetrayrc" .config/stalonetrayrc
  cd "$current_path"
}

copy_config_files(){
  current_path="$PWD"
  cd "/home/${myName}"
  # Symlink and setup .config files from dotfiles repo ($myDots/.config)
  ! [[ -d "/home/${myName}/.config" ]] && mkdir -p "/home/${myName}/.config"
  if ! [[ -z "$@" ]]
  then
    for i in "$@"
    do
      if [[ "$i" == "stalonetray" ]] ; then
	cp "${myDots}/.config/stalonetrayrc" .config/stalonetrayrc
	continue
      fi
      printf "\nCopying ${i} from ${myDots}/.config to ~/.config/${i}\n"
      cp -r "${myDots}/.config/${i}" .config/
    done
    cd "$current_path"
    exit 0
  fi
  # for i in "bash" "zsh" "git" "herbstluftwm" "i3" "polybar" "sxhkd" "rofi" "alacritty" "vifm" "picom" "conky" "dunst" "tmux" "jgmenu" "zathura" "bottom" "bat" "starshipPrompt" "neofetch"
  for i in "${configFolders[@]}"
  do
    printf "\nCopying ${i} from ${myDots}/.config to ~/.config/${i}\n"
    cp -r "${myDots}/.config/${i}" .config/
  done
  cp "${myDots}/.config/stalonetrayrc" .config/stalonetrayrc
  cd "$current_path"
}

setup_config_files(){
  case "${1}" in
    "dry")
      dry_link_config_dry "${@: 2}"
      exit 0 ;;
    "all")
      link_config_files "${@: 2}"
      exit 0 ;;
    "cp")
      copy_config_files "${@: 2}"
      exit 0 ;;
    "ln")
      link_config_files "${@: 2}"
      exit 0 ;;
    *)
      printf "\nRequires the software stow (GNU/stow)\n"
      printf "\nRun 'dotsinit config [all|cp|ln|dry]' to sync with [symlink|copy|symlink|dry] files between dotfiles config repo and system\n"
      printf "\nRun 'dotsinit config' also takes optional arguments, after modes above, of specific config folders.\n"
      printf "\nExample 'dotsinit config ln i3 polybar' to symlink i3 and polybar config folders. \n"
      exit 1 ;;
  esac
}

setup_local_files(){
  current_path="$PWD"
  cd "/home/${myName}"
  # Symlink and setup .local files, mainly ".local/bin", from dotfiles repo ($myDots/.local)
  ! [[ -d "/home/${myName}/.local/bin" ]] && mkdir -p "/home/${myName}/.local/bin"
  stow -v --no-folding -t ".local/bin" -d "${myDots}/.local" -S "bin"
  ! [[ -d "/home/${myName}/.local/src" ]] && mkdir -p "/home/${myName}/.local/src"
  cp -r "${myDots}/.local/src"/*.png .local/src/
  ! [[ -d "/home/${myName}/.local/share/rofi" ]] && mkdir -p "/home/${myName}/.local/share/rofi"
  cp -r "${myDots}/.local/share/rofi/themes" .local/share/rofi/
  cd "$current_path"
}

setup_home_files(){
  current_path="$PWD"
  cd "/home/${myName}"
  # Symlink and setup dotfiles files in $HOME directory like .bashrc,.zshenv, from dotfiles repo ($myDots/HOME)
  printf "\nSymlink and setup dotfiles files in $HOME directory like .bashrc,.zshenv, from dotfiles repo ($myDots/HOME)\n"
  if [[ "$@" == "ln" ]] ; then
    for i in "${homeFiles[@]}"
    do
      printf "\n\nLinking ${myDots}/HOME/$i to ~/$i\n"
      printf ":----------------------------------------------\n"
      ln -sf "${myDots}/HOME/$i" $i
    done
    cd "$current_path"
    exit 0
  fi
  if [[ "$@" == "cp" ]] ; then
    for i in "${homeFiles[@]}"
    do
      printf "\n\nCopying ${myDots}/HOME/$i to ~/$i\n"
      printf ":----------------------------------------------\n"
      cp "${myDots}/HOME/$i" $i
    done
    cd "$current_path"
    exit 0
  fi
  if ! [[ -z "$@" ]] ; then
    for i in "${@}"
    do
      printf "\n\nLinking ${myDots}/HOME/$i to ~/$i\n"
      printf ":----------------------------------------------\n"
      ln -sf "${myDots}/HOME/$i" $i
    done
    cd "$current_path"
    exit 0
  fi
  printf "\nUsage:\n"
  printf "\nRun 'dotsinit home [cp|ln]' to [copy|symlink] files ${myDots}/HOME to $HOME.\n"
  cd "$current_path"
  exit 1
}

backup_config_files(){
  current_path="$PWD"
  cd "/home/${myName}"
  ! [[ -d "/home/${myName}/.config" ]] && exit 1
  # Backup specifc .config folders in ($myDots/.config) to ${myName}/BackUp
  ! [[ -d "/home/${myName}/BackUp/.config" ]] && mkdir -p "/home/${myName}/BackUp/.config"
  printf "\nBackup specifc .config folders in ($myDots/.config) to ${myName}/BackUp\n"
  if ! [[ -z "$@" ]]
  then
    for i in "$@"
    do
      if [[ "$i" == "stalonetray" ]] ; then
	[[ -f ".config/stalonetrayrc" ]] && cp .config/stalonetrayrc BackUp/.config/
	continue
      fi
      if [[ -d ".config/${i}" && -z "$(ls -A .config/${i})" ]]; then
	rm -r ".config/${i}"
      else
	[[ -d ".config/${i}" ]] && cp -r ".config/$i" "BackUp/.config/"
      fi
    done
    cd "$current_path"
    exit 0
  fi
  for i in "${configFolders[@]}"
  do
    if [[ -d ".config/${i}" && -z "$(ls -A .config/${i})" ]]; then
      rm -r ".config/${i}"
    else
      [[ -d ".config/${i}" ]] && cp -r ".config/$i" "BackUp/.config/"
    fi
  done
  [[ -f ".config/stalonetrayrc" ]] && cp .config/stalonetrayrc BackUp/.config/
  cd "$current_path"
}

backup_local_files() {
  current_path="$PWD"
  cd "/home/${myName}"
  ! [[ -d "/home/${myName}/.local/bin" ]] && exit 1
  # BackUp local files, mainly from \".local/bin\", to ($myName/BackUp/.local/bin)ymlink and setup .local files, mainly ".local/bin", from dotfiles repo ($myDots/.local)
  ! [[ -d "/home/${myName}/BackUp/.local" ]] && mkdir -p "/home/${myName}/BackUp/.local"
  printf "\nBackUp local files, mainly from \".local/bin\", to ($myName/BackUp/.local/bin)\n"
  if [[ -d "/home/${myName}/.local/bin" && -z "$(ls -A /home/${myName}/.local/bin)" ]]; then
    rm -r "/home/${myName}/.local/bin"
  else
    cp -r ".local/bin" "BackUp/.local/"
  fi
  cd "$current_path"
}

backup_home_files() {
  current_path="$PWD"
  cd "/home/${myName}"
  # BackUp dotfiles files in $HOME directory like .bashrc,.zshenv to ($myName/BackUp/HOME)
  printf "\nBackUp dotfiles files in $HOME directory like .bashrc,.zshenv to (~/BackUp/HOME)\n"
  ! [[ -d "/home/${myName}/BackUp/HOME" ]] && mkdir -p "/home/${myName}/BackUp/HOME"
  for i in "${homeFiles[@]}"
  do
    printf "\n\nBackup: ~/$i to ~/BackUp/HOME/\n"
    printf ":----------------------------------------------\n"
    cp "$i" ${myName}/BackUp/HOME/
  done
  printf "\nBackUp rofi themes to ~/BackUp/.local/share/rofi/themes from ~/.local/share/rofi/themes if it exists"
  ! [[ -d "/home/${myName}/BackUp/.local/share/rofi" ]] && mkdir -p "/home/${myName}/BackUp/.local/share/rofi"
  cp -r .local/share/rofi/themes "BackUp/.local/share/rofi/"
  cd "$current_path"
}

backup_files() {

  case "$1" in
    "cfg")
      backup_config_files "${@: 2}"
      exit 0 ;;
    "local")
      backup_local_files "${@: 2}"
      exit 0 ;;
    "home")
      backup_home_files "${@: 2}"
      exit 0 ;;
    *)
      printf "\nUsage:\n"
      printf "\nRun 'dotsinit bu [cfg|local|home]' to backup files in config|local|home\n"
      exit 1 ;;
  esac

}

remove_config_files(){
  current_path="$PWD"
  cd "/home/${myName}"
  if [[ -z "$1" ]] ; then
    echo "Needs arguments"
    echo "Provide dry, link, file or <name of folder> as argument"
    exit 1
  fi
  if [[ "$@" == "link" ]]
  then
    for i in "${configFolders[@]}"
    do
      printf "\n\nRemoving broken links in ${i}\n"
      printf ":----------------------------------------------\n"
      ! [[ -d ".config/${i}" ]] && echo "Directory ${i} doesn't exist" && continue
      find .config/${i} -xtype l | awk '{print "Removing "$1}'
      find .config/${i} -xtype l -delete
    done
    find .config/stalonetrayrc -xtype l -delete
    cd "$current_path"
    exit 0
  fi
  if [[ "$@" == "file" ]]
  then
    for i in "${configFolders[@]}"
    do
      printf "\n\nRemoving files in ${i}\n"
      printf ":----------------------------------------------\n"
      ! [[ -d ".config/${i}" ]] && echo "Directory ${i} doesn't exist" && continue
      find .config/${i} | awk '{print "Removing "$1}'
      find .config/${i} -delete
    done
    rm .config/stalonetrayrc
    cd "$current_path"
    exit 0
  fi
  if [[ "$@" == "dry" ]]
  then
    for i in "${configFolders[@]}"
    do
      printf "\n\nSimulating removal of files in ${i}\n"
      printf ":----------------------------------------------\n"
      ! [[ -d ".config/${i}" ]] && echo "Directory ${i} doesn't exist" && continue
      find .config/${i} | awk '{print "Removing "$1}'
    done
    printf "\nRemoving .config/stalonetrayrc\n"
    printf "\n This is just a simulation it will not remove anything"
    cd "$current_path"
    exit 0
  fi
  if ! [[ -z "$@" ]] ; then
    for i in "$@"
    do
      printf "\n\n(Dry) Removing files in ${i}\n"
      printf ":----------------------------------------------\n"
      if [[ "$i" == "stalonetray" ]] ; then
	find .config/stalonetrayrc -delete
	continue
      fi
      ! [[ -d ".config/${i}" ]] && echo "Directory ${i} doesn't exist" && continue
      find .config/${i} | awk '{print "Removing "$1}'
      find .config/${i} -type l -delete
      find .config/${i} -delete
    done
    cd "$current_path"
    exit 0
  fi
  cd "$current_path"
  exit 1
}

remove_local_files(){
  current_path="$PWD"
  cd "/home/${myName}"
  if [[ -z "$1" ]] ; then
    echo "Needs arguments"
    echo "Provide dry, link, file or <name of file> as argument"
    cd "$current_path"
    exit 1
  fi
  if [[ "$@" == "link" ]]
  then
    printf "\n\nRemoving broken links in ~/.local/bin folder\n"
    printf ":----------------------------------------------\n"
    ! [[ -d ".local/bin" ]] && echo "Directory ~/.local/bin doesn't exist" && exit 1
    find .local/bin -type l -delete
    cd "$current_path"
    exit 0
  fi
  if [[ "$@" == "file" ]]
  then
    printf "\n\nRemoving files in ~/.local/bin folder\n"
    printf ":----------------------------------------------\n"
    ! [[ -d ".local/bin" ]] && echo "Directory ~/.local/bin doesn't exist" && exit 1
    find .local/bin -delete
    cd "$current_path"
    exit 0
  fi
  if [[ "$@" == "dry" ]]
  then
    printf "\n\nSimulating removal of files in ~/.local/bin folder\n"
    printf ":----------------------------------------------\n"
    ! [[ -d ".local/bin" ]] && echo "Directory ~/.local/bin doesn't exist" && exit 1
    find .local/bin | awk '{print "Removing "$1}'
    cd "$current_path"
    exit 0
  fi
  if ! [[ -z "$@" ]] ; then
    printf "\n\nCustom removal of files in ~/.local/bin folder\n"
    printf ":----------------------------------------------\n"
    ! [[ -d ".local/bin" ]] && echo "Directory ~/.local/bin doesn't exist" && exit 1
    for i in "${@}"
    do
      printf "\n\nRemoving file ~/.local/bin/${i}\n"
      printf ":----------------------------------------------\n"
      find .local/bin/$i -delete
    done
    cd "$current_path"
    exit 0
  fi
  cd "$current_path"
  exit 0
}

remove_home_files(){
  current_path="$PWD"
  cd "/home/${myName}"
  if [[ -z "$1" ]] ; then
    echo "Needs arguments"
    echo "Provide dry, link, file or <name of file> as argument"
    cd "$current_path"
    exit 1
  fi
  if [[ "$@" == "link" ]]
  then
    printf "\n\nRemoving broken links in home folder\n"
    printf ":----------------------------------------------\n"
    for i in "${homeFiles[@]}"
    do
      printf "\n\nRemoving broken link ~/${i}\n"
      printf ":----------------------------------------------\n"
      file "${HOME}/$i" >/dev/null && echo "File ~/$i doesn't exist" && continue
      file "${HOME}/$i" >/dev/null && find ${i} -xtype l -delete
    done
    cd "$current_path"
    exit 0
  fi
  if [[ "$@" == "file" ]]
  then
    printf "\n\nRemoving files in home folder\n"
    printf ":----------------------------------------------\n"
    for i in "${homeFiles[@]}"
    do
      printf "\n\nRemoving file ~/${i}\n"
      printf ":----------------------------------------------\n"
      file "${HOME}/$i" >/dev/null && echo "File ~/$i doesn't exist" && continue
      file "${HOME}/$i" >/dev/null && find ${i} -delete
    done
    cd "$current_path"
    exit 0
  fi
  if [[ "$@" == "dry" ]]
  then
    printf "\n\nSimulating removal of files in home folder\n"
    printf ":----------------------------------------------\n"
    for i in "${homeFiles[@]}"
    do
      printf "\n\n(Dry) Removing file ~/${i}\n"
      printf ":----------------------------------------------\n"
      file "${HOME}/$i" >/dev/null && echo "File ~/$i doesn't exist" && continue
      file "${HOME}/$i" >/dev/null && find ${i} | awk '{print "Removing "$1}'
    done
    cd "$current_path"
    exit 0
  fi
  if ! [[ -z "$@" ]] ; then
    printf "\n\nCustom removal of files in home folder\n"
    printf ":----------------------------------------------\n"
    for i in "${@}"
    do
      printf "\n\n(Dry) Removing file ~/${i}\n"
      printf ":----------------------------------------------\n"
      file "${HOME}/$i" >/dev/null && echo "File ~/$i doesn't exist" && continue
      file "${HOME}/$i" >/dev/null && find ${i} -delete
    done
    cd "$current_path"
    exit 0
  fi
  cd "$current_path"
  exit 0
}

remove_files() {

  case "$1" in
    "cfg")
      remove_config_files "${@: 2}"
      exit 0 ;;
    "local")
      remove_local_files "${@: 2}"
      exit 0 ;;
    "home")
      remove_home_files "${@: 2}"
      exit 0 ;;
    *)
      printf "\nUsage:\n"
      printf "\nRun 'dotsinit rm [cfg|local|home]' [file|dry|link] to remove|delink|dry files in config|local|home\n"
      exit 1 ;;
  esac

}

setup_fonts(){
  current_path="$PWD"
  cd "/home/${myName}"
  # Setup fonts to ~/.local/share/fonts with ~/.local/bin/myfonts (which downloads fonts and run `fc-cache -fv`)
  ! [[ -f ".local/bin/myfonts" ]] && echo "~/.local/bin/myfonts script not found" && exit 1
  .local/bin/myfonts get || echo "~/.local/bin/myfonts script not executable" && exit 1
  fc-cache -fv
  cd "$current_path"
}

if ! [[ -x "$(command -v stow)" ]]
then
  echo "Requires the software stow (GNU/stow)"
  echo "Exiting"
  exit 1
fi

case "${1}" in
  "nv")
    setup_nvim_files "${@: 2}"
    exit 0 ;;
  "dry")
    setup_all_dry
    exit 0 ;;
  "all")
    setup_all_files
    exit 0 ;;
  "config")
    setup_config_files "${@: 2}"
    exit 0 ;;
  "local")
    setup_local_files
    exit 0 ;;
  "home")
    setup_home_files "${@: 2}"
    exit 0 ;;
  "bu")
    backup_files "${@: 2}"
    exit 0 ;;
  "rm")
    remove_files "${@: 2}"
    exit 0 ;;
  "fonts")
    setup_fonts
    exit 0 ;;
  "test")
    setup_test_files
    exit 0 ;;
  "testdry")
    setup_test_files_dry
    exit 0 ;;
  *)
    printf "\nRequires the software stow (GNU/stow)\n"
    printf "\nRun 'dotsinit [all|config|local|home|fonts]' to sync [all|.config|.local/bin|\$HOME|.local/share/fonts] files between dotfiles repo and local system\n"
    printf "\nRun 'dotsinit config' also takes optional arguments of specific config folders. \nEg:- dotsinit config i3, dotsinit config zsh git\n"
    printf "\nRun 'dotsinit bu' to backup existing config and local files\n"
    printf "\nRun 'dotsinit nv' to setup nvim config (set myNvim* variables in the script)\n"
    printf "\nRun 'dotsinit rm' to remove .config from local system\n"
    printf "It further needs exactly one of arguments [dry|delete|link] to [simulate removal|directly delete|only delete broken symlinks]\n"
    printf "\nRun 'dotsinit dry' for dry-run of 'all' (no changes will be made)\n\n"
    exit 1 ;;
esac
